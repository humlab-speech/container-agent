{"mappings":"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","sources":["./src/ApiResponse.class.js","./src/app.js"],"sourcesContent":["class ApiResponse {\r\n    constructor(code = 200, body = \"\") {\r\n        this.code = code;\r\n        this.body = body;\r\n    }\r\n\r\n    toJSON() {\r\n        let msg = this.body;\r\n        if(typeof msg !== 'object') {\r\n            msg = { msg: this.body };\r\n        }\r\n        \r\n        return JSON.stringify(msg);\r\n    }\r\n}\r\n\r\nmodule.exports = ApiResponse","const ApiResponse = require('./ApiResponse.class.js');\r\nconst simpleGit = require('simple-git')\r\nrequire('process');\r\n\r\nprocess.env.GIT_SSL_NO_VERIFY=true; //This is only needed for local testing\r\n\r\n/**\r\n * This agent is aware of the following env-vars:\r\n *\r\n * GIT_USER_NAME\r\n * GIT_USER_EMAIL\r\n * GIT_BRANCH\r\n * GIT_REPOSITORY_URL\r\n * PROJECT_PATH\r\n * \r\n**/\r\nclass GitRepository {\r\n    constructor(repoPath, gitUserName, gitUserEmail) {\r\n        this.git = new simpleGit();\r\n        this.repoPath = repoPath;\r\n        this.gitUserName = gitUserName;\r\n        this.gitUserEmail = gitUserEmail;\r\n    }\r\n\r\n    configGit() {\r\n        return this.git.cwd(this.repoPath)\r\n            .addConfig('user.name', this.gitUserName)\r\n            .addConfig('user.email', this.gitUserEmail);\r\n    }\r\n\r\n    async clone() {\r\n        if(!process.env.GIT_REPOSITORY_URL) {\r\n            return new ApiResponse(500, 'Envvar GIT_REPOSITORY_URL is not set');\r\n        }\r\n\r\n        return this.git.clone(process.env.GIT_REPOSITORY_URL, this.repoPath)\r\n        .then(t => {\r\n            return new ApiResponse(200, 'ok');\r\n        })\r\n        .catch(error => {\r\n            let errorMsg = error.toString();\r\n\r\n            if(errorMsg.indexOf('already exists and is not an empty directory') != -1) {\r\n                return new ApiResponse(400, 'Local repository exists');\r\n            }\r\n\r\n            if(errorMsg.indexOf('Authentication failed') != -1) {\r\n                return new ApiResponse(400, 'GitLab authentication failed');\r\n            }\r\n\r\n            return new ApiResponse(500, 'Unknown error');\r\n        });\r\n    }\r\n\r\n    async status() {\r\n        return this.git.status({ baseDir: this.repoPath }).then(t => {\r\n            return new ApiResponse(200, t);\r\n        }).catch(error => this.handleUnknownError(error));\r\n    }\r\n\r\n    async add(paths = [\".\"]) {\r\n        return this.configGit().add(paths).then(result => {\r\n            return new ApiResponse(200, 'ok');\r\n        }).catch(error => this.handleUnknownError(error));\r\n    }\r\n    \r\n    async commit(msg = 'system-auto-commit') {\r\n        return this.configGit().commit(msg).then(result => {\r\n            return new ApiResponse(200, 'ok');\r\n        }).catch(error => this.handleUnknownError(error));\r\n    }\r\n    \r\n    async push(branch = 'master') {\r\n        if(typeof process.env.GIT_BRANCH != \"undefined\" && branch == 'master') {\r\n            branch = process.env.GIT_BRANCH;\r\n        }\r\n\r\n        return this.configGit().push('origin', branch).then(result => {\r\n            return new ApiResponse(200, 'ok');\r\n        }).catch(async error => {\r\n            let errorMsg = error.toString();\r\n\r\n            if(errorMsg.indexOf(\"failed to push some refs to\") != -1) {\r\n                //Based on this error message we assume the problem to be a conflicting change has been made, we 'solve' this by create another branch\r\n\r\n                await this.resetToHead();\r\n                let branch = await this.checkoutBranch();\r\n                await this.add();\r\n                await this.commit();\r\n                await this.push(branch.body);\r\n\r\n                return new ApiResponse(200, \"Push conflicted with upstream changes, pushed to a separate branch\");\r\n            }\r\n        });\r\n    }\r\n\r\n    generateSystemBranchName() {\r\n        let branchName = new Date().toISOString();\r\n        branchName = branchName.replace(/:/g, \"\");\r\n        branchName = branchName.substr(0, 17)\r\n        branchName = \"system-branch-\" + branchName;\r\n        return branchName;\r\n    }\r\n\r\n    async checkoutBranch() {\r\n        let branch = this.generateSystemBranchName();\r\n        return this.configGit().checkoutLocalBranch(branch).then(result => {\r\n            return new ApiResponse(200, branch);\r\n        }).catch(error => this.handleUnknownError(error));\r\n    }\r\n    \r\n    async resetToHead() {\r\n        return this.configGit().reset('soft', ['HEAD^']).then(result => {\r\n            return new ApiResponse(200, 'ok');\r\n        }).catch(error => this.handleUnknownError(error));\r\n    }\r\n\r\n    handleUnknownError(error) {\r\n        let errorMsg = error.toString();\r\n        console.error('command ' + error.task.commands[0] + ' failed with message: ' + errorMsg);\r\n        return new ApiResponse(500, 'Unknown error');\r\n    }\r\n}\r\n\r\nif(typeof process.argv[2] == \"undefined\") {\r\n    return console.log('No command supplied');\r\n}\r\nelse {\r\n\r\n    let repoPath = process.env.PROJECT_PATH ? process.env.PROJECT_PATH : null;\r\n    let gitUserName = process.env.GIT_USER_NAME ? process.env.GIT_USER_NAME : null;\r\n    let gitUserEmail = process.env.GIT_USER_EMAIL ? process.env.GIT_USER_EMAIL : null;\r\n\r\n    let errors = [];\r\n    if(repoPath == null) {\r\n        errors.push(new ApiResponse(500, 'Envvar PROJECT_PATH is not set'));\r\n    }\r\n    if(gitUserName == null) {\r\n        errors.push(new ApiResponse(500, 'Envvar GIT_USER_NAME is not set'));\r\n    }\r\n    if(gitUserEmail == null) {\r\n        errors.push(new ApiResponse(500, 'Envvar GIT_USER_EMAIL is not set'));\r\n    }\r\n\r\n    if(errors.length > 0) {\r\n        errors.forEach(error => {\r\n            console.error(error.toJSON());\r\n        });\r\n        return false;\r\n    }\r\n\r\n    const repo = new GitRepository(repoPath, gitUserName, gitUserEmail);\r\n\r\n    let cmd = process.argv[2];\r\n    let args = process.argv;\r\n    args.splice(0, 3);\r\n\r\n    switch(cmd) {\r\n        case \"clone\":\r\n            repo.clone().then(ar => console.log(ar.toJSON()));\r\n            break;\r\n        case \"add\":\r\n            repo.add().then(ar => console.log(ar.toJSON()));\r\n            break;\r\n        case \"commit\":\r\n            repo.commit().then(ar => console.log(ar.toJSON()));\r\n            break;\r\n        case \"reset\":\r\n            repo.resetToHead().then(ar => console.log(ar.toJSON()));\r\n            break;\r\n        case \"push\":\r\n            repo.push().then(ar => console.log(ar.toJSON()));\r\n            break;\r\n        case \"status\":\r\n            repo.status().then(ar => console.log(ar.toJSON()));\r\n            break;\r\n        case \"checkout\":\r\n            repo.checkoutBranch().then(ar => console.log(ar.toJSON()));\r\n            break;\r\n        case \"save\": //Save is just a shorthand for add+commit+push\r\n            repo.add().then(() => {\r\n                repo.commit().then(() => {\r\n                    repo.push().then(ar => console.log(ar.toJSON()));\r\n                });\r\n            });\r\n            break;\r\n    }\r\n\r\n}\r\n"],"names":["constructor","code","body","this","toJSON","msg","JSON","stringify","ApiResponse","simpleGit","GitRepository","repoPath","gitUserName","gitUserEmail","git","configGit","cwd","addConfig","clone","then","t","catch","error","errorMsg","toString","indexOf","status","baseDir","handleUnknownError","paths","add","result","commit","branch","push","async","resetToHead","checkoutBranch","generateSystemBranchName","branchName","Date","toISOString","replace","substr","checkoutLocalBranch","reset","console","task","commands","process","argv","errors","length","forEach","repo","cmd","splice","ar","log"],"version":3,"file":"app.js.map"}