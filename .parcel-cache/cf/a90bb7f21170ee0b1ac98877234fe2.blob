var t,e=require("simple-git"),n=require("process");t=class{constructor(t=200,e=""){this.code=t,this.body=e}toJSON(){let t=this.body;return"object"!=typeof t&&(t={msg:this.body}),JSON.stringify(t)}};var o=function(){var o={exports:this},s=n;const r=t,a=e;class i{constructor(t,e,n){this.git=new a,this.repoPath=t,this.gitUserName=e,this.gitUserEmail=n}configGit(){return this.git.cwd(this.repoPath).addConfig("user.name",this.gitUserName).addConfig("user.email",this.gitUserEmail)}async clone(){return this.git.clone("https://root:8CiZGbwzXe2sW-_Qmoyi@gitlab.localtest.me/sven_at_example.com/test-1a.git",this.repoPath).then((t=>new r(200,"ok"))).catch((t=>{let e=t.toString();return-1!=e.indexOf("already exists and is not an empty directory")?new r(400,"Local repository exists"):-1!=e.indexOf("Authentication failed")?new r(400,"GitLab authentication failed"):new r(500,"Unknown error")}))}async status(){return this.git.status({baseDir:this.repoPath}).then((t=>new r(200,t))).catch((t=>this.handleUnknownError(t)))}async add(t=["."]){return this.configGit().add(t).then((t=>new r(200,"ok"))).catch((t=>this.handleUnknownError(t)))}async commit(t="system-auto-commit"){return this.configGit().commit(t).then((t=>new r(200,"ok"))).catch((t=>this.handleUnknownError(t)))}async push(t="master"){return this.configGit().push("origin",t).then((t=>new r(200,"ok"))).catch((async t=>{if(-1!=t.toString().indexOf("failed to push some refs to")){await this.resetToHead();let t=await this.checkoutBranch();return await this.add(),await this.commit(),await this.push(t.body),new r(200,"Push conflicted with upstream changes, pushed to a separate branch")}}))}generateSystemBranchName(){let t=(new Date).toISOString();return t=t.replace(/:/g,""),t=t.substr(0,17),t="system-branch-"+t,t}async checkoutBranch(){let t=this.generateSystemBranchName();return this.configGit().checkoutLocalBranch(t).then((e=>new r(200,t))).catch((t=>this.handleUnknownError(t)))}async resetToHead(){return this.configGit().reset("soft",["HEAD^"]).then((t=>new r(200,"ok"))).catch((t=>this.handleUnknownError(t)))}handleUnknownError(t){let e=t.toString();return console.error("command "+t.task.commands[0]+" failed with message: "+e),new r(500,"Unknown error")}}if(void 0===s.argv[2])return o.exports;{let t="./repo",e="Johan",n="johan.von.boer@umu.se",a=[];if(null==t&&a.push(new r(500,"Envvar PROJECT_PATH is not set")),null==e&&a.push(new r(500,"Envvar GIT_USER_NAME is not set")),null==n&&a.push(new r(500,"Envvar GIT_USER_EMAIL is not set")),a.length>0)return a.forEach((t=>{console.error(t.toJSON())})),o.exports;const c=new i(t,e,n);let h=s.argv[2];switch(s.argv.splice(0,3),h){case"clone":c.clone().then((t=>console.log(t.toJSON())));break;case"add":c.add().then((t=>console.log(t.toJSON())));break;case"commit":c.commit().then((t=>console.log(t.toJSON())));break;case"reset":c.resetToHead().then((t=>console.log(t.toJSON())));break;case"push":c.push().then((t=>console.log(t.toJSON())));break;case"status":c.status().then((t=>console.log(t.toJSON())));break;case"checkout":c.checkoutBranch().then((t=>console.log(t.toJSON())));break;case"save":c.add().then((()=>{c.commit().then((()=>{c.push().then((t=>console.log(t.toJSON())))}))}))}}return o.exports}.call({});module.exports=o;
//# sourceMappingURL=app.js.map
